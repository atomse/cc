;;; -*- Mode: Common-Lisp; -*-

(defmacro pass? (test value)
  `(format t "~a  ~:[FAIL~;pass~]~%" ',test (equal ,test ,value)))

(pass? (make-new-amp 3) '(t (+ +) (+ +) (+ +)))
(pass? (contract-hole-amp '(t (+ +) (+ +)))
       '(t (k +) (+ +))))
(pass? (contract-particle-amp '(t (+ k) (+ +)))
       '(t (+ k) (+ k))))
(pass? (contract-particle-amp '(t (+ k)))
       nil)

(pass? (mapcan #'contract-hole-ampprod '(((t (k +))) ((t (k +)))))
       nil)
(pass? (contract-hole-ampprod '((t (+ +)) (t (+ +) (+ +))))
       '(((t (k +)) (t (+ +) (+ +))) ((t (+) (+)) (t (k +) (+ +)))))
(pass? (contract-hole-ampprod '((t (+ +) (+ +)) (t (+ +) (+ +))))
       '(((t (k +) (+ +)) (t (+ +) (+ +)))))

(pass? (contract-ops-ampprods '((- -) (+ +)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k k)) (t (+ +) (+ +)))
         ((t (k +)) (t (+ k) (+ +)))
         ((t (+ k)) (t (k +) (+ +)))
         ((t (+ +)) (t (k k) (+ +)))))
(pass? (contract-ops-ampprods '((- +) (- +)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k +)) (t (k +) (+ +)))
         ((t (k +)) (t (k +) (+ +)))
         ((t (+ +)) (t (k +) (k +)))))
(pass? (contract-ops-ampprods '((- +)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k +)) (t (+ +) (+ +))) ((t (+ +)) (t (k +) (+ +)))))
(pass? (contract-ops-ampprods '((- +)) '(((t (k +)) (t (+ +) (+ +)))
                                         ((t (+ +)) (t (k +) (+ +)))))
       '(((t (k +)) (t (k +) (+ +)))
         ((t (k +)) (t (k +) (+ +)))
         ((t (+ +)) (t (k +) (k +)))))
(pass? (contract-ops-ampprods '((+ -)) '(((t (k +)) (t (+ +) (+ +)))
                                         ((t (+ +)) (t (k +) (+ +)))))
       '(((t (k k)) (t (+ +) (+ +)))
         ((t (k +)) (t (+ k) (+ +)))
         ((t (+ k)) (t (k +) (+ +)))
         ((t (+ +)) (t (k k) (+ +)))))
       
(pass? (id-pair-op '(k -)) 1)
(pass? (id-amp '(t (k -) (k +))) '(1 2))
(pass? (sort-ampprod '((t (+ +)) (t (k +))))
       '((t (k +)) (t (+ +))))
(pass? (contract-ops-ampprods '((- -) (- +)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k k)) (t (k +) (+ +)))
         ((t (k +)) (t (k k) (+ +)))
         ((t (k k)) (t (k +) (+ +)))
         ((t (k +)) (t (k k) (+ +)))
         ((t (+ k)) (t (k +) (k +)))
         ((t (+ +)) (t (k k) (k +)))))
(pass? (contract-ops-ampprods-uniq '((- -) (- +)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k k)) (t (k +) (+ +)))
         ((t (+ k)) (t (k k) (+ +)))
         ((t (k +)) (t (k +) (k +)))
         ((t (+ +)) (t (k k) (k +)))))
(pass? (contract-ops-ampprods '((- -) (- -)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k k)) (t (k k) (+ +))) ((t (k k)) (t (k k) (+ +)))
         ((t (k +)) (t (k k) (+ k))) ((t (k k)) (t (k k) (+ +)))
         ((t (k k)) (t (k k) (+ +))) ((t (k +)) (t (k k) (+ k)))
         ((t (+ k)) (t (k k) (k +))) ((t (+ k)) (t (k k) (k +)))
         ((t (+ +)) (t (k k) (k k)))))
(pass? (contract-ops-ampprods-uniq '((- -) (- -)) '(((t (+ +)) (t (+ +) (+ +)))))
       '(((t (k k)) (t (k k) (+ +)))
         ((t (k +)) (t (k k) (k +)))
         ((t (+ k)) (t (k k) (k +)))
         ((t (+ +)) (t (k k) (k k)))))
(pass? (contract-ops-ampprods '((- -) (- -)) '(((t (+ +) (+ +)) (t (+ +) (+ +)))))
       '(((t (k k) (k k)) (t (+ +) (+ +))) ((t (k k) (k +)) (t (+ k) (+ +)))
         ((t (k k) (k +)) (t (+ k) (+ +))) ((t (k +) (k +)) (t (+ k) (+ k)))
         ((t (k k) (+ k)) (t (k +) (+ +))) ((t (k k) (+ +)) (t (k k) (+ +)))))

(pass? (connected-amp? '(t (k k) (+ +))) t)
(pass? (connected-amp? '(t (k +) (+ +))) t)
(pass? (connected-amp? '(t (+ +) (+ +))) nil)
(pass? (contract-h2e-ampprod '(h (- -) (- -)) '((t (+ +) (+ +)) (t (+ +) (+ +))))
       '(((h (- -) (- -)) (t (k k) (k +)) (t (+ k) (+ +)))
         ((h (- -) (- -)) (t (k +) (k +)) (t (+ k) (+ k)))
         ((h (- -) (- -)) (t (k k) (+ k)) (t (k +) (+ +)))
         ((h (- -) (- -)) (t (k k) (+ +)) (t (k k) (+ +)))))

(pass? (gen-amps-list '(1))
       '(((t (+ +)))
         ((t (+ +)) (t (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +)) (t (+ +)))))
(pass? (gen-amps-list '(1 2))
       '(((t (+ +)))                        
         ((t (+ +)) (t (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +)) (t (+ +)))
         ((t (+ +)) (t (+ +) (+ +)))
         ((t (+ +)) (t (+ +) (+ +)) (t (+ +) (+ +)))
         ((t (+ +)) (t (+ +) (+ +)) (t (+ +) (+ +)) (t (+ +) (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +) (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +) (+ +)) (t (+ +) (+ +)))
         ((t (+ +)) (t (+ +)) (t (+ +)) (t (+ +) (+ +)))))

(pass? (count-tot-lines '+ '((t (k +)) (t (k +) (+ +))))
       4)
(pass? (count-tot-lines 'k '((t (k) (+)) (t (k +) (+ +))))
       2)
(pass? (count-hole-lines '((h (- -) (- -)) (t (k +)) (t (k +)) (t (+ k)) (t (+ k))))
       6)
(pass? (label-amp-hole '- 'x '(h (- -) (- -)))
       '(h (x -) (- -)))
(pass? (label-amp-particle '- 'x '(h (- x) (- -)))
       '(h (- x) (- x)))
(pass? (label-contract-line-once #'label-amp-hole 'x '((t (+ +)) (t (k +)) (t (+ k)) (t (+ k))))
       '((t (+ +)) (t (x +)) (t (+ k)) (t (+ k))))
(pass? (label-contract-line-once #'label-amp-hole 'x '((t (+ +)) (t (+ +)) (t (+ k)) (t (+ k))))
       '((t (+ +)) (t (+ +)) (t (+ k)) (t (+ k))))

(pass? (label-lines '((h (- -) (- +)) (t (k +)) (t (k +)) (t (+ k)) (t (+ +))))
       '((h (1 3) (2 4)) (t (1 5)) (t (2 6)) (t (7 3)) (t (8 9))))
;
;(pass? (mapcan (lambda (ampprod)    
;                 (contract-h2e-ampprod '(h (- -) (- -)) ampprod))
;               (gen-amps-list '(1)))
;       '(((h (- -) (- -)) (t (k) (k)) (t (k) (k)))
;         ((h (- -) (- -)) (t (k) (k)) (t (k) (+)) (t (+) (k)))
;         ((h (- -) (- -)) (t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k)))))
;(gen-amp-diagrams '(1))

;(pass? (gen-h2e-diagrams '(1))
;       '(((t (k) (+))) ((t (+) (k))) ((t (k) (k))) ((t (k) (k)) (t (k) (+)))
;         ((t (k) (k)) (t (+) (k))) ((t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (k) (+))) ((t (+) (k)) (t (+) (k)))
;         ((t (k) (k)) (t (k) (k))) ((t (k) (+)) (t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (+) (k)) (t (+) (k))) ((t (k) (k)) (t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k)))))
;(gen-h2e-diagrams '(1 2))
