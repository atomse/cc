;;; -*- Mode: Common-Lisp; -*-

;(compile-file "")
;(require ')
;(load "ccd.cl")

(defmacro pass? (test value)
  `(format t "~a  ~:[FAIL~;pass~]~%" ',test (equal ,test ,value)))

(pass? (op-copy 3 '+) '(+ + +))
(pass? (contract-hole-amp '(t (+ +) (+ +)))
       '(t (k +) (+ +))))
(pass? (contract-particle-amp '(t (+ +) (k +)))
       '(t (+ +) (k k))))
(pass? (contract-particle-amp '(t (+) (k)))
       nil)

(pass? (contract-hole-ampprod '(t ((+) (+)) ((+ +) (+ +))))
       '(((t (k) (+)) (t (+ +) (+ +))) ((t (+) (+)) (t (k +) (+ +)))))
(pass? (contract-hole-ampprod '((t (+ +) (+ +)) (t (+ +) (+ +))))
       '(((t (k +) (+ +)) (t (+ +) (+ +)))))

(pass? (contract-ops-ampprods '(h (- -) (+ +)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (+)) (t (k +) (+ +)))
         ((t (k) (+)) (t (k +) (+ +)))
         ((t (+) (+)) (t (k k) (+ +)))))
(pass? (contract-ops-ampprods '(h (-) ()) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (+)) (t (+ +) (+ +))) ((t (+) (+)) (t (k +) (+ +)))))
(pass? (contract-ops-ampprods '(h (-) ()) '(((t (k) (+)) (t (+ +) (+ +)))
                                            ((t (+) (+)) (t (k +) (+ +)))))
       '(((t (k) (+)) (t (k +) (+ +)))
         ((t (k) (+)) (t (k +) (+ +)))
         ((t (+) (+)) (t (k k) (+ +)))))
(pass? (contract-ops-ampprods '(h () (-)) '(((t (k) (+)) (t (+ +) (+ +)))
                                            ((t (+) (+)) (t (k +) (+ +)))))
       '(((t (k) (k)) (t (+ +) (+ +))) ((t (k) (+)) (t (+ +) (k +)))
         ((t (+) (k)) (t (k +) (+ +))) ((t (+) (+)) (t (k +) (k +)))))
       
(pass? (contract-ops-ampprods '(h (- -) (- +)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (k)) (t (k +) (+ +))) ((t (k) (+)) (t (k +) (k +)))
         ((t (k) (k)) (t (k +) (+ +))) ((t (+) (k)) (t (k k) (+ +)))
         ((t (k) (+)) (t (k +) (k +))) ((t (+) (+)) (t (k k) (k +)))))
(pass? (contract-ops-ampprods '(h (- -) (- +)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (k)) (t (k +) (+ +))) ((t (k) (+)) (t (k +) (k +)))
         ((t (k) (k)) (t (k +) (+ +))) ((t (k) (+)) (t (k +) (k +)))
         ((t (+) (k)) (t (k k) (+ +))) ((t (+) (+)) (t (k k) (k +)))))
(pass? (contract-ops-ampprods-uniq '(h (- -) (- +)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (k)) (t (k +) (+ +))) ((t (k) (+)) (t (k +) (k +)))
         ((t (+) (k)) (t (k k) (+ +))) ((t (+) (+)) (t (k k) (k +)))))
(pass? (contract-ops-ampprods '(h (- -) (- -)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (k)) (t (k +) (k +))) ((t (k) (k)) (t (k +) (k +)))
         ((t (k) (+)) (t (k +) (k k))) ((t (k) (k)) (t (k +) (k +)))
         ((t (k) (k)) (t (k +) (k +))) ((t (k) (+)) (t (k +) (k k)))
         ((t (+) (k)) (t (k k) (k +))) ((t (+) (k)) (t (k k) (k +)))
         ((t (+) (+)) (t (k k) (k k)))))
(pass? (contract-ops-ampprods '(h (- -) (- -)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (k)) (t (k +) (k +))) ((t (k) (k)) (t (k +) (k +)))
         ((t (k) (+)) (t (k +) (k k))) ((t (k) (k)) (t (k +) (k +)))
         ((t (+) (k)) (t (k k) (k +))) ((t (k) (k)) (t (k +) (k +)))
         ((t (k) (+)) (t (k +) (k k))) ((t (+) (k)) (t (k k) (k +)))
         ((t (+) (+)) (t (k k) (k k)))))
(pass? (contract-ops-ampprods-uniq '(h (- -) (- -)) '(((t (+) (+)) (t (+ +) (+ +)))))
       '(((t (k) (k)) (t (k +) (k +))) ((t (k) (+)) (t (k +) (k k)))
         ((t (+) (k)) (t (k k) (k +))) ((t (+) (+)) (t (k k) (k k)))))

(pass? (contract-h2e-ampprod '(h (- -) (- -)) '((t (+ +) (+ +)) (t (+ +) (+ +))))
       '(((h (- -) (- -)) (t (k k) (k +)) (t (+ +) (k +)))
         ((h (- -) (- -)) (t (k k) (+ +)) (t (+ +) (k k)))
         ((h (- -) (- -)) (t (k +) (k k)) (t (k +) (+ +)))
         ((h (- -) (- -)) (t (k +) (k +)) (t (k +) (k +)))))

(pass? (gen-amps-list '(1))
       '(((t (+) (+)))
         ((t (+) (+)) (t (+) (+)))
         ((t (+) (+)) (t (+) (+)) (t (+) (+)))
         ((t (+) (+)) (t (+) (+)) (t (+) (+)) (t (+) (+)))))
(pass? (gen-amps-list '(1 2))
       '(((t (+) (+)))
         ((t (+) (+)) (t (+) (+)))
         ((t (+) (+)) (t (+) (+)) (t (+) (+)))
         ((t (+) (+)) (t (+) (+)) (t (+) (+)) (t (+) (+)))
         ((t (+) (+)) (t (+ +) (+ +)))
         ((t (+) (+)) (t (+ +) (+ +)) (t (+ +) (+ +)))
         ((t (+) (+)) (t (+ +) (+ +)) (t (+ +) (+ +)) (t (+ +) (+ +)))
         ((t (+) (+)) (t (+) (+)) (t (+ +) (+ +)))
         ((t (+) (+)) (t (+) (+)) (t (+ +) (+ +)) (t (+ +) (+ +)))
         ((t (+) (+)) (t (+) (+)) (t (+) (+)) (t (+ +) (+ +)))))

(pass? (mapcan (lambda (ampprod)
                 (contract-h2e-ampprod '(h (- -) (- -)) ampprod))
               (gen-amps-list '(1)))
       '(((h (- -) (- -)) (t (k) (k)) (t (k) (k)))
         ((h (- -) (- -)) (t (k) (k)) (t (k) (+)) (t (+) (k)))
         ((h (- -) (- -)) (t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k)))))

(pass? (count-tot-lines '+ '((T (K) (+)) (T (K +) (+ +))))
       4)
(pass? (count-tot-lines 'k '((T (K) (+)) (T (K +) (+ +))))
       2)
(pass? (count-hole-lines '((h (- -) (- -)) (t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k))))
       6)

;(gen-amp-diagrams '(1))

;(pass? (gen-h2e-diagrams '(1))
;       '(((t (k) (+))) ((t (+) (k))) ((t (k) (k))) ((t (k) (k)) (t (k) (+)))
;         ((t (k) (k)) (t (+) (k))) ((t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (k) (+))) ((t (+) (k)) (t (+) (k)))
;         ((t (k) (k)) (t (k) (k))) ((t (k) (+)) (t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (+) (k)) (t (+) (k))) ((t (k) (k)) (t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k)))))
;(gen-h2e-diagrams '(1 2))
