;;; -*- Mode: Common-Lisp; -*-

(defmacro pass? (test value)
  `(let ((tf (equal ,test ,value)))
     (format t "~a  ~:[FAIL~;pass~]~%" ',test tf)
     tf))
(pass? (make-new-amp 3)
       '(t (pe+ he+) (pe+ he+) (pe+ he+)))
(pass? (contract-hole-amp 1 '(t (pe+ he+) (pe+ he+)))
       '((t (pe+ (hi+ 1)) (pe+ he+))))
(pass? (contract-particle-amp 1 '(t (pe+ he+) (pe+ he+)))
       '((t ((pi+ 1) he+) (pe+ he+))))
(pass? (contract-particle-amp 1 '(t (pe+ (hi+ 1)) (pe+ he+)))
       '((t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 1) he+))))
(pass? (contract-particle-amp 1 '(t ((pi+ 1) he+) ((pi+ 1) he+)))
       nil)

(pass? (contract-hole-ampprod  1 '((t (pe+ he+)) (t (pe+ he+) (pe+ he+))))
       '(((t (pe+ (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) (pe+ he+)))))
(pass? (contract-particle-ampprod  1 '((t (pe+ he+) (pe+ he+))
                                       (t (pe+ he+) (pe+ he+))))
       '(((t ((pi+ 1) he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((pe+ 2) (he+ 2)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 1) (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 1) he+) (pe+ he+)))
         ((t ((pi+ 1) he+)) (t (pe+ (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t ((pi+ 1) (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 1) he+)))))
(pass? (contract-op-ampprods '(((he- 1) (he+ 1)))
                             '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((he- 2) (he+ 2)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 1) (hi+ 1))) (t (pe+ (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 1) he+) (pe+ (hi+ 2))))
         ((t ((pi+ 1) (hi+ 2))) (t (pe+ (hi+ 1)) (pe+ he+)))
         ((t ((pi+ 1) he+)) (t (pe+ (hi+ 1)) (pe+ (hi+ 2))))
         ((t (pe+ (hi+ 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))))
         ((t (pe+ (hi+ 2))) (t (pe+ (hi+ 1)) ((pi+ 1) he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 1) (hi+ 2))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((he- 2) (pe- 2)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 1) (hi+ 1)) ((pi+ 2) (hi+ 2))))
         ((t ((pi+ 2) (hi+ 1)) ((pi+ 1) (hi+ 2))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((pe+ 2) (he+ 2)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ . 2) hi+ . 1) (pe+ . he+)))
         ((t ((pi+ . 2) . he+) (pe+ hi+ . 1)))))
(pass? (contract-op-ampprods
        '(((he- 1) (he+ 1)) ((he- 2) (he+ 2)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1)) (pe+ (hi+ 2))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((pe+ 2) (he+ 2)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 1) he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 1) he+) (pe+ he+)))))
(pass? (contract-op-ampprods
        '(((he- 1) (he+ 1)) ((he- 2) (he+ 2)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1)) (pe+ (hi+ 2))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 2)) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((he- 2) (pe- 2)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 1) (hi+ 1))) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))
         ((t ((pi+ 1) (hi+ 1))) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))
         ((t ((pi+ 2) (hi+ 1))) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 1) (hi+ 2)) ((pi+ 2) he+)))
         ((t ((pi+ 2) (hi+ 1))) (t ((pi+ 1) he+) (pe+ (hi+ 2))))
         ((t (pe+ (hi+ 1))) (t ((pi+ 1) he+) ((pi+ 2) (hi+ 2))))
         ((t ((pi+ 1) (hi+ 2))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t ((pi+ 1) (hi+ 2))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))
         ((t ((pi+ 1) he+)) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 2))))
         ((t ((pi+ 1) he+)) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 2))))
         ((t ((pi+ 2) (hi+ 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)))
         ((t (pe+ (hi+ 2))) (t ((pi+ 1) (hi+ 1)) ((pi+ 2) he+)))
         ((t ((pi+ 2) he+)) (t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))))
         ((t (pe+ he+)) (t ((pi+ 1) (hi+ 1)) ((pi+ 2) (hi+ 2))))
         ((t ((pi+ 2) (hi+ 2))) (t (pe+ (hi+ 1)) ((pi+ 1) he+)))
         ((t (pe+ (hi+ 2))) (t ((pi+ 2) (hi+ 1)) ((pi+ 1) he+)))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) ((pi+ 1) (hi+ 2))))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) ((pi+ 1) (hi+ 2))))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 1)) ((he- 2) (pe- 2)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 1) (hi+ 1)) ((pi+ 2) (hi+ 2))) (t (pe+ he+) (pe+ he+)))
         ((t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t ((pi+ 1) (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 2)) (pe+ he+)))
         ((t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))
         ((t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))
         ((t ((pi+ 2) (hi+ 1)) ((pi+ 1) (hi+ 2))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 1) (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) ((pi+ 1) he+)) (t (pe+ (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 1) he+)) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 1) he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 1) he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 2))) (t ((pi+ 1) he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 1) he+) ((pi+ 2) he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 1) (hi+ 2)) ((pi+ 2) he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 1) he+) (pe+ (hi+ 2))))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 1) he+) (pe+ (hi+ 2))))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 1) he+) ((pi+ 2) (hi+ 2))))))

(pass? (connected-amp? '(t ((pi+ 1) he+) (pe+ (hi+ 1)))) 'pi+)
(pass? (connected-amp? '(t (pe+ he+) (pe+ he+))) nil)

(pass? (id-of-amp '(t ((pi+ 1) (hi+ 1)) ((pi+ 2) (hi+ 2)))) '(505 510))
(pass? (id-of-amp '(t (pe+ he+) (pe+ he+))) '(1000 1000))
(pass? (id-of-ampprod '((t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 1) he+) (pe+ he+))))
       '((509 902) (604 1000)))
(pass? (id-of-ampprod '((t ((pi+ 1) he+) (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 2)))))
       '((510 901) (604 1000)))
(pass? (id-of-ampprod '((t ((pi+ 2) (hi+ 2)) (pe+ (hi+ 1))) (t ((pi+ 1) he+) (pe+ he+))))
       '((510 901) (604 1000)))
(pass? (id-of-ampprod '((t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+))))
       '((505 902) (608 1000)))

(pass? (symmetric-op? '(g ((he- 1) (pe- 1)) ((he- 2) (pe- 2)))) t)
(pass? (symmetric-op? '(g ((he- 1) (he+ 1)) ((he- 2) (he+ 2)))) t)

(pass? (contract-h2e-ampprod
         '(g ((he- 1) (pe- 1)) ((he- 2) (pe- 2)))
         '((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+))))
       '(((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 2)) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 1) (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) ((pi+ 1) he+)) (t (pe+ (hi+ 2)) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 1) he+)) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 1) he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 1) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 2))) (t ((pi+ 1) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 1) he+) ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 1) (hi+ 2)) ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 1) he+) (pe+ (hi+ 2))))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 1) he+) (pe+ (hi+ 2))))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 1) he+) ((pi+ 2) (hi+ 2))))))
(pass? (mapcar #'id-of-ampprod
               (contract-h2e-ampprod
                '(g ((he- 1) (pe- 1)) ((he- 2) (pe- 2)))
                '((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((5 10) (505 902 ) (608 1000))
         ((5 10) (505 608 ) (902 1000))
         ((5 10) (505 1000) (510 1000))
         ((5 10) (505 1000) (608 902 ))
         ((5 10) (506 901 ) (608 1000))
         ((5 10) (509 604 ) (902 1000))
         ((5 10) (510 1000) (604 901 ))
         ((5 10) (604 901 ) (608 902 ))
         ((5 10) (509 902 ) (604 1000))
         ((5 10) (510 901 ) (604 1000))
         ((5 10) (604 608 ) (901 902 ))
         ((5 10) (506 1000) (509 1000))
         ((5 10) (506 1000) (608 901 ))
         ((5 10) (506 608 ) (901 1000))
         ((5 10) (509 1000) (604 902 ))
         ((5 10) (604 902 ) (608 901 ))
         ((5 10) (510 604 ) (901 1000))))
(pass? (mapcar #'id-of-ampprod
               (contract-h2e-ampprod
                '(g ((he- 1) (pe- 1)) ((he- 2) (pe- 2)))
                '((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((505) (5 10) (510 1000))
         ((505) (5 10) (608 902 ))
         ((509) (5 10) (506 1000))
         ((901) (5 10) (506 608 ))
         ((509) (5 10) (604 902 ))
         ((901) (5 10) (510 604 ))
         ((506) (5 10) (509 1000))
         ((506) (5 10) (608 901 ))
         ((604) (5 10) (509 902 ))
         ((604) (5 10) (510 901 ))
         ((510) (5 10) (505 1000))
         ((902) (5 10) (505 608 ))
         ((608) (5 10) (505 902 ))
         ((510) (5 10) (604 901 ))
         ((902) (5 10) (509 604 ))
         ((608) (5 10) (506 901 ))))

(pass? (gen-amps-list '(1))
       '(((t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)))))
(pass? (gen-amps-list '(1 2))
       '(((t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))

(pass? (count-excite-lines '((t ((hi+ 1) he+)) (t ((hi+ 2) he+) (he+ pe+)))) 4)

(pass? (gen-diagrams-w/o-index '(1))
       '(((f ((hi- 1) (he+ 1))) (t (pe+ (hi+ 1))))
         ((f ((pe+ 1) (pi- 1))) (t ((pi+ 1) he+)))
         ((g ((hi- 1) (he+ 1)) ((hi- 2) (he+ 2))) (t (pe+ (hi+ 1))))
         ((g ((pe+ 1) (pi- 1)) ((pe+ 2) (pi- 2))) (t ((pi+ 1) he+)))
         ((g ((hi- 1) (he+ 1)) ((pe+ 2) (pi- 2))) (t ((pi+ 2) (hi+ 1))))
         ((g ((hi- 1) (pi- 1)) ((pe+ 2) (he+ 2))) (t ((pi+ 1) (hi+ 1))))
         ((f ((hi- 1) (pi- 1))) (t (pe+ (hi+ 1))) (t ((pi+ 1) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (he+ 2))) (t ((pi+ 1) (hi+ 1)))
          (t (pe+ (hi+ 2))))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (he+ 2))) (t (pe+ (hi+ 1)))
          (t ((pi+ 1) (hi+ 2))))
         ((g ((hi- 1) (pi- 1)) ((pe+ 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)))
          (t ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 1)) ((pe+ 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)))
          (t ((pi+ 1) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)))
          (t (pe+ (hi+ 2))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)))
          (t ((pi+ 1) (hi+ 2))) (t ((pi+ 2) he+)))))
;(gen-diagrams-w/o-index '(1 2))
;;;;;;;;;;;;;;;;;;;

(pass? (node-symm? '(t (pe+ he+))) nil)
(pass? (node-symm? '(t (pe+ he+) (pe+ he+))) nil)
(pass? (node-symm? '(t (pe+ he+) (pe+ (hi+ 1)) (pe+ he+))) 2)
(pass? (replace-index '((1 . 2) (2 . 1))
                      '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2)))
                        (t (pe+ (hi+ 1)) ((pi+ 2) he+))
                        (t ((pi+ 1) he+) (pe+ (hi+ 2)))))
       '((g ((hi- 2) (pi- 2)) ((hi- 1) (pi- 1)))
         (t (pe+ (hi+ 2)) ((pi+ 1) he+))
         (t ((pi+ 2) he+) (pe+ (hi+ 1)))))

(pass? (diagram-symm? '((g ((hi- 1) (he+ 1)) ((hi- 2) (he+ 2))) (t (pe+ (hi+ 1)) (pe+ (hi+ 2))))) t)
(pass? (diagram-symm? '((g ((pe+ 1) (pi- 1)) ((pe+ 2) (pi- 2))) (t ((pi+ 1) he+) ((pi+ 2) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (he+ 1)) ((pe+ 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))) nil)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+)))) nil)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 1) he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 1) he+) ((pi+ 2) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 1) he+) (pe+ (hi+ 2))))) t)
(pass? (diagram-symm '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) ((pi+ 2) (hi+ 2)) (pe+ he+) (pe+ he+)))) nil)

(pass? (count-inner-loops '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) ((pi+ 2) (hi+ 2))))) 2)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 1) (hi+ 2)) (pe+ he+)))) 1)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 2)) (pe+ he+)))) 2)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ (hi+ 2))) (t ((pi+ 2) he+) (pe+ he+)))) 1)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 1)) ((hi- 2) (pi- 2))) (t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 2)) ((pi+ 2) he+)))) 1)







