;;; -*- Mode: Common-Lisp; -*-

(defmacro pass? (test value)
  `(format t "~a  ~:[FAIL~;pass~]~%" ',test (equal ,test ,value)))
(pass? (make-new-amp 3)
       '(t (pe+ he+) (pe+ he+) (pe+ he+)))
(pass? (contract-hole-amp 1 '(t (pe+ he+) (pe+ he+)))
       '((t (pe+ (hi+ 1)) (pe+ he+))))
(pass? (contract-particle-amp 1 '(t (pe+ he+) (pe+ he+)))
       '((t ((pi+ 1) he+) (pe+ he+))))
(pass? (contract-particle-amp 1 '(t (pe+ (hi+ 1)) (pe+ he+)))
       '((t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 1) he+))))
(pass? (contract-particle-amp 1 '(t ((pi+ 1) he+) ((pi+ 2) he+)))
       nil)

(pass? (contract-hole-ampprod  1 '((t (pe+ he+)) (t (pe+ he+) (pe+ he+))))
       '(((t (pe+ (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) (pe+ he+)))))
(pass? (contract-particle-ampprod  1 '((t (pe+ he+) (pe+ he+))
                                       (t (pe+ he+) (pe+ he+))))
       '(((t ((pi+ 1) he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((pe+ 3) (he+ 4)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))))
(pass? (contract-op-ampprods '(((he- 1) (he+ 2)))
                             '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (he+ 4)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1))) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t ((pi+ 2) (hi+ 3))) (t (pe+ (hi+ 1)) (pe+ he+)))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 3))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 3))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 4) (hi+ 1)) ((pi+ 2) (hi+ 3))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((pe+ 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ . 2) hi+ . 1) (pe+ . he+)))
         ((t ((pi+ . 2) . he+) (pe+ hi+ . 1)))))
(pass? (contract-op-ampprods
        '(((he- 1) (he+ 2)) ((he- 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1)) (pe+ (hi+ 3))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((pe+ 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 2) he+) (pe+ he+)))))
(pass? (contract-op-ampprods
        '(((he- 1) (he+ 2)) ((he- 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1))) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1))) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1))) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1))) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) he+) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 2) (hi+ 3))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 3))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)))
         ((t ((pi+ 2) he+)) (t ((pi+ 4) (hi+ 1)) (pe+ (hi+ 3))))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 4) (hi+ 3))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t (pe+ (hi+ 3))) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) he+)))
         ((t ((pi+ 4) he+)) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 4) (hi+ 3))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))
         ((t (pe+ (hi+ 3))) (t ((pi+ 4) (hi+ 1)) ((pi+ 2) he+)))
         ((t ((pi+ 4) he+)) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))))
         ((t (pe+ he+)) (t ((pi+ 4) (hi+ 1)) ((pi+ 2) (hi+ 3))))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))) (t (pe+ he+) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) ((pi+ 4) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) ((pi+ 2) (hi+ 3))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((t ((pi+ 4) (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 4) (hi+ 3))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 2) he+) ((pi+ 4) (hi+ 3))))))

(pass? (connected-amp? '(t ((pi+ 2) he+) (pe+ (hi+ 1)))) 'pi+)
(pass? (connected-amp? '(t (pe+ he+) (pe+ he+))) nil)

(pass? (id-of-amp '(t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3)))) '(509 519))
(pass? (id-of-amp '(t (pe+ he+) (pe+ he+))) '(1000 1000))
(pass? (id-of-ampprod '((t ((pi+ 4) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) (pe+ he+))))
       '((517 903) (608 1000)))
(pass? (id-of-ampprod '((t ((pi+ 2) he+) (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 4) (hi+ 3)))))
       '((519 901) (608 1000)))
(pass? (id-of-ampprod '((t ((pi+ 4) (hi+ 3)) (pe+ (hi+ 1))) (t ((pi+ 2) he+) (pe+ he+))))
       '((519 901) (608 1000)))
(pass? (id-of-ampprod '((t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+))))
       '((509 903) (616 1000)))

(pass? (symmetric-op? '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))) t)
(pass? (symmetric-op? '(g ((he- 1) (he+ 2)) ((he- 3) (he+ 4)))) t)

(pass? (contract-h2e-ampprod
         '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
         '((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+))))
       '(((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))))
(pass? (mapcar #'id-of-ampprod
               (contract-h2e-ampprod
                '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
                '((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((6 16) (509  903) (616 1000))
         ((6 16) (509  616) (903 1000))
         ((6 16) (509 1000) (519 1000))
         ((6 16) (509 1000) (616  903))
         ((6 16) (511  901) (616 1000))
         ((6 16) (517  608) (903 1000))
         ((6 16) (608  901) (616  903))
         ((6 16) (608  616) (901  903))
         ((6 16) (511 1000) (517 1000))
         ((6 16) (511 1000) (616  901))
         ((6 16) (608  903) (616  901))))
(pass? (mapcar #'id-of-ampprod
               (contract-h2e-ampprod
                '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
                '((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((6 16) (509) (519 1000))
         ((6 16) (509) (616 903))
         ((6 16) (511 1000) (517))
         ((6 16) (511 616) (901))
         ((6 16) (517) (608 903))
         ((6 16) (519 608) (901))
         ((6 16) (517 903) (608))
         ((6 16) (519 901) (608)))

(pass? (gen-amps-list '(1))
       '(((t pe+ he+))
         ((t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+) (t pe+ he+))))
(pass? (gen-amps-list '(1 2))
       '(((t pe+ he+))
         ((t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+) (t pe+ he+ pe+ he+))))

(pass? (count-tot-lines (lambda (x) (eql x 'hi+))
                        '((t hi+ he+) (t hi+ he+ he+ pe+)))
       2)
(pass? (count-excite-lines '((t hi+ he+) (t hi+ he+ he+ pe+))) 4)

(pass? (gen-diagrams-w/o-index '(1))
       '(((f ((hi- 1) (he+ 2))) (t (pe+ (hi+ 1))))
         ((f ((pe+ 1) (pi- 2))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (he+ 2)) ((hi- 3) (he+ 4))) (t (pe+ (hi+ 1))))
         ((g ((pe+ 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (he+ 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 4) (hi+ 1))))
         ((g ((hi- 1) (pi- 2)) ((pe+ 3) (he+ 4))) (t ((pi+ 2) (hi+ 1))))
         ((f ((hi- 1) (pi- 2))) (t (pe+ (hi+ 1))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (he+ 4))) (t ((pi+ 2) (hi+ 1)))
          (t (pe+ (hi+ 3))))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (he+ 4))) (t (pe+ (hi+ 1)))
          (t ((pi+ 2) (hi+ 3))))
         ((g ((hi- 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)))
          (t ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)))
          (t ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)))
          (t (pe+ (hi+ 3))) (t ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)))
          (t ((pi+ 2) (hi+ 3))) (t ((pi+ 4) he+)))))
;(gen-diagrams-w/o-index '(1 2))
;;;;;;;;;;;;;;;;;;;
;
;(pass? (label-amp-contract-hole 'x '(t hi+ pe+ he+ pe+))
;        '(t (hi+ . x) pe+ he+ pe+)))
;(pass? (label-amp-contract-hole 'y '(t (hi+ . x) pe+ hi+ pe+))
;        '(t (hi+ . x) pe+ (hi+ . y) pe+)))
;(pass? (label-amp-contract-particle 'x '(t he+ pi+ he+ pi+))
;       '(t he+ (pi+ . x) he+ pi+))
;(pass? (label-contract-pair #'label-amp-contract-hole 'x
;                        '((h hi- he+) (t hi+ pe+) (t he+ pi+) (t he+ pi+)))
;       '((h (hi- . x) he+) (t (hi+ . x) pe+) (t he+ pi+) (t he+ pi+)))
;
;(pass? (label-lines '((h hi- pi- hi- he+) (t hi+ pe+) (t hi+ pe+) (t he+ pi+) (t he+ pe+)))
;       '((h (hi- . 1) (pi- . 2) (hi- . 3) (he+ . 4))
;         (t (hi+ . 1) (pe+ . 7)) (t (hi+ . 3) (pe+ . 8))
;         (t (he+ . 5) (pi+ . 2)) (t (he+ . 6) (pe+ . 9))))
;(pass? (label-lines '((h hi- pi- hi- pi-) (t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+)))
;       '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;         (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;         (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;
;(pass? (factor-int-line-pair (label-lines '((h hi- pi- hi- pi-)
;                                            (t hi+ pi+ hi+ pe+)
;                                            (t he+ pi+ he+ pe+))))
;       .5)
;(pass? (factor-int-line-pair (label-lines '((h hi- pi- hi- pi-)
;                                            (t hi+ pe+ hi+ pe+)
;                                            (t he+ pi+ he+ pi+))))
;       .25)
;(pass? (factor-int-line-pair (label-lines '((h hi- pi- hi- pi-)
;                                            (t hi+ pi+ he+ pi+)
;                                           (t hi+ pe+ he+ pe+))))
;       .5)
;(pass? (factor-int-line-pair (label-lines '((h hi- pi- hi- pi-)
;                                            (t hi+ pi+ he+ pe+)
;                                            (t hi+ pi+ he+ pe+))))
;       1)
;
;(pass? (vertex-equiv? '(t hi+ pi+ he+ pe+) '(t hi+ pi+ he+ pe+))
;       t)
;
;(pass? (find-rline-vertex '(pi- . 2)
;                          '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                            (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))))
;       '(h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4)))
;(pass? (find-rline-vertex '(pi+ . 2)
;                          '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                            (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))))
;       (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4)))
;
;(pass? (ex-line-eql? '(pe+ . 7) '(pe+ . 8)
;                     '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                       (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                       (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       t)
;(pass? (ex-line-eql? '(he+ . 5) '(he+ . 6)
;                     '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                       (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                       (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       nil)
;
;(pass? (track-rline '(he+ . 5) '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                                 (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                                 (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       '((pe+ . 7) (hi+ . 3) (hi- . 3) (pi- . 4) (pi+ . 4) (he+ . 5)))
;(pass? (track-rline '(he+ . 6) '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                                 (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                                 (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       '((pe+ . 8) (he+ . 6)))
;
;(pass? (count-loops '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                      (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                      (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       2)
;
;(pass? (hole-loop-sign '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                         (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                         (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       1)
;(pass? (collect-ext-holes '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
;                            (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
;                            (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
;       '((he+ . 5) (he+ . 6)))

(pass? (permutation-sets '(1 2 2))
       '((1 2 2) (2 1 2) (2 2 1)))
(pass? (permutation-sets '((pe+ . 7) (pe+ . 8))
                         :test (lambda (x y)
                                 (ex-line-eql? x y
                                  '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
                                    (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
                                    (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))))
       '((pe+ . 7) (pe+ . 8)))
(pass? (permutation-even-odd-sets '(1 2 2 4))
       '(((1 2 2 4) (1 4 2 2) (2 1 4 2) (2 2 1 4) (2 4 2 1) (4 2 1 2))
         ((1 2 4 2) (2 1 2 4) (2 2 4 1) (2 4 1 2) (4 1 2 2) (4 2 2 1))))
