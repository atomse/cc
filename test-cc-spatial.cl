;;; -*- Mode: Common-Lisp; -*-

(defmacro pass? (test value)
  `(format t "~a  ~:[FAIL~;pass~]~%" ',test (equal ,test ,value)))
(pass? (make-new-amp 3)
       '(t (pe+ he+) (pe+ he+) (pe+ he+)))
(pass? (contract-hole-amp 1 '(t (pe+ he+) (pe+ he+)))
       '((t (pe+ (hi+ 1)) (pe+ he+))))
(pass? (contract-particle-amp 1 '(t (pe+ he+) (pe+ he+)))
       '((t ((pi+ 1) he+) (pe+ he+))))
(pass? (contract-particle-amp 1 '(t (pe+ (hi+ 1)) (pe+ he+)))
       '((t ((pi+ 1) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 1) he+))))
(pass? (contract-particle-amp 1 '(t ((pi+ 1) he+) ((pi+ 2) he+)))
       nil)

(pass? (contract-hole-ampprod  1 '((t (pe+ he+)) (t (pe+ he+) (pe+ he+))))
       '(((t (pe+ (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) (pe+ he+)))))
(pass? (contract-particle-ampprod  1 '((t (pe+ he+) (pe+ he+))
                                       (t (pe+ he+) (pe+ he+))))
       '(((t ((pi+ 1) he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((pe+ 3) (he+ 4)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))))
(pass? (contract-op-ampprods '(((he- 1) (he+ 2)))
                             '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (he+ 4)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1))) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t ((pi+ 2) (hi+ 3))) (t (pe+ (hi+ 1)) (pe+ he+)))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 3))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 3))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))
         ((t (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 4) (hi+ 1)) ((pi+ 2) (hi+ 3))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((pe+ 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ . 2) hi+ . 1) (pe+ . he+)))
         ((t ((pi+ . 2) . he+) (pe+ hi+ . 1)))))
(pass? (contract-op-ampprods
        '(((he- 1) (he+ 2)) ((he- 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1)) (pe+ (hi+ 3))))))
(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((pe+ 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 2) he+) (pe+ he+)))))
(pass? (contract-op-ampprods
        '(((he- 1) (he+ 2)) ((he- 3) (he+ 4)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) (pe+ he+)))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
        '(((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1))) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1))) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1))) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1))) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 1))) (t ((pi+ 2) he+) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 2) (hi+ 3))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 3))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)))
         ((t ((pi+ 2) he+)) (t ((pi+ 4) (hi+ 1)) (pe+ (hi+ 3))))
         ((t ((pi+ 2) he+)) (t (pe+ (hi+ 1)) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 4) (hi+ 3))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)))
         ((t (pe+ (hi+ 3))) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) he+)))
         ((t ((pi+ 4) he+)) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))))
         ((t (pe+ he+)) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))))
         ((t ((pi+ 4) (hi+ 3))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)))
         ((t (pe+ (hi+ 3))) (t ((pi+ 4) (hi+ 1)) ((pi+ 2) he+)))
         ((t ((pi+ 4) he+)) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))))
         ((t (pe+ he+)) (t ((pi+ 4) (hi+ 1)) ((pi+ 2) (hi+ 3))))))

(pass? (contract-op-ampprods
        '(((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
        '(((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))) (t (pe+ he+) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) ((pi+ 4) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) ((pi+ 2) (hi+ 3))) (t (pe+ he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((t ((pi+ 4) (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 4) (hi+ 3))) (t ((pi+ 2) he+) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) ((pi+ 4) he+)))
         ((t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))
         ((t (pe+ (hi+ 1)) (pe+ he+)) (t ((pi+ 2) he+) ((pi+ 4) (hi+ 3))))))

(pass? (connected-amp? '(t ((pi+ 2) he+) (pe+ (hi+ 1)))) 'pi+)
(pass? (connected-amp? '(t (pe+ he+) (pe+ he+))) nil)

(pass? (id-of-amp '(t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3)))) '(509 519))
(pass? (id-of-amp '(t (pe+ he+) (pe+ he+))) '(1000 1000))
(pass? (id-of-ampprod '((t ((pi+ 4) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) (pe+ he+))))
       '((517 903) (608 1000)))
(pass? (id-of-ampprod '((t ((pi+ 2) he+) (pe+ he+)) (t (pe+ (hi+ 1)) ((pi+ 4) (hi+ 3)))))
       '((519 901) (608 1000)))
(pass? (id-of-ampprod '((t ((pi+ 4) (hi+ 3)) (pe+ (hi+ 1))) (t ((pi+ 2) he+) (pe+ he+))))
       '((519 901) (608 1000)))
(pass? (id-of-ampprod '((t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+))))
       '((509 903) (616 1000)))

(pass? (symmetric-op? '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))) t)
(pass? (symmetric-op? '(g ((he- 1) (he+ 2)) ((he- 3) (he+ 4)))) t)

(pass? (contract-h2e-ampprod
         '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
         '((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+))))
       '(((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 2) (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))))
(pass? (mapcar #'id-of-ampprod
               (contract-h2e-ampprod
                '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
                '((t (pe+ he+) (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((6 16) (509  903) (616 1000))
         ((6 16) (509  616) (903 1000))
         ((6 16) (509 1000) (519 1000))
         ((6 16) (509 1000) (616  903))
         ((6 16) (511  901) (616 1000))
         ((6 16) (517  608) (903 1000))
         ((6 16) (608  901) (616  903))
         ((6 16) (608  616) (901  903))
         ((6 16) (511 1000) (517 1000))
         ((6 16) (511 1000) (616  901))
         ((6 16) (608  903) (616  901))))
(pass? (mapcar #'id-of-ampprod
               (contract-h2e-ampprod
                '(g ((he- 1) (pe- 2)) ((he- 3) (pe- 4)))
                '((t (pe+ he+)) (t (pe+ he+) (pe+ he+)))))
       '(((6 16) (509) (519 1000))
         ((6 16) (509) (616 903))
         ((6 16) (511 1000) (517))
         ((6 16) (511 616) (901))
         ((6 16) (517) (608 903))
         ((6 16) (519 608) (901))
         ((6 16) (517 903) (608))
         ((6 16) (519 901) (608))))

(pass? (gen-amps-list '(1))
       '(((t pe+ he+))
         ((t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+) (t pe+ he+))))
(pass? (gen-amps-list '(1 2))
       '(((t pe+ he+))
         ((t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+) (t pe+ he+))
         ((t pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+ pe+ he+) (t pe+ he+ pe+ he+))
         ((t pe+ he+) (t pe+ he+) (t pe+ he+) (t pe+ he+ pe+ he+))))

(pass? (count-tot-lines (lambda (x) (eql x 'hi+))
                        '((t hi+ he+) (t hi+ he+ he+ pe+)))
       2)
(pass? (count-excite-lines '((t hi+ he+) (t hi+ he+ he+ pe+))) 4)

(pass? (gen-diagrams-w/o-index '(1))
       '(((f ((hi- 1) (he+ 2))) (t (pe+ (hi+ 1))))
         ((f ((pe+ 1) (pi- 2))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (he+ 2)) ((hi- 3) (he+ 4))) (t (pe+ (hi+ 1))))
         ((g ((pe+ 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (he+ 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 4) (hi+ 1))))
         ((g ((hi- 1) (pi- 2)) ((pe+ 3) (he+ 4))) (t ((pi+ 2) (hi+ 1))))
         ((f ((hi- 1) (pi- 2))) (t (pe+ (hi+ 1))) (t ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (he+ 4))) (t ((pi+ 2) (hi+ 1)))
          (t (pe+ (hi+ 3))))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (he+ 4))) (t (pe+ (hi+ 1)))
          (t ((pi+ 2) (hi+ 3))))
         ((g ((hi- 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)))
          (t ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)))
          (t ((pi+ 2) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)))
          (t (pe+ (hi+ 3))) (t ((pi+ 4) he+)))
         ((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)))
          (t ((pi+ 2) (hi+ 3))) (t ((pi+ 4) he+)))))
;(gen-diagrams-w/o-index '(1 2))
;;;;;;;;;;;;;;;;;;;

(pass? (node-symm? '(t (pe+ he+))) nil)
(pass? (node-symm? '(t (pe+ he+) (pe+ he+))) nil)
(pass? (node-symm? '(t (pe+ he+) (pe+ (hi+ 2)) (pe+ he+))) 2)
(pass? (replace-index '((1 . 3) (2 . 4) (3 . 1) (4 . 2))
                      '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4)))
                        (t (pe+ (hi+ 1)) ((pi+ 4) he+))
                        (t ((pi+ 2) he+) (pe+ (hi+ 3)))))
       '((g ((hi- 3) (pi- 4)) ((hi- 1) (pi- 2)))
         (t (pe+ (hi+ 3)) ((pi+ 2) he+))
         (t ((pi+ 4) he+) (pe+ (hi+ 1)))))

(pass? (diagram-symm? '((g ((hi- 1) (he+ 2)) ((hi- 3) (he+ 4))) (t (pe+ (hi+ 1)) (pe+ (hi+ 3))))) t)
(pass? (diagram-symm? '((g ((pe+ 1) (pi- 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 2) he+) ((pi+ 4) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (he+ 2)) ((pe+ 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)))) nil)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))) nil)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 2) he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 2) he+) ((pi+ 4) he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))) t)
(pass? (diagram-symm? '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t (pe+ (hi+ 1)) ((pi+ 4) he+)) (t ((pi+ 2) he+) (pe+ (hi+ 3))))) t)
(pass? (diagram-symm '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3)) (pe+ he+) (pe+ he+)))) nil)

(pass? (count-inner-loops '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) ((pi+ 4) (hi+ 3))))) 2)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 4) (hi+ 1)) (pe+ he+)) (t ((pi+ 2) (hi+ 3)) (pe+ he+)))) 1)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t ((pi+ 4) (hi+ 3)) (pe+ he+)))) 2)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ (hi+ 3))) (t ((pi+ 4) he+) (pe+ he+)))) 1)
(pass? (count-inner-loops '((g ((hi- 1) (pi- 2)) ((hi- 3) (pi- 4))) (t ((pi+ 2) (hi+ 1)) (pe+ he+)) (t (pe+ (hi+ 3)) ((pi+ 4) he+)))) 1)
