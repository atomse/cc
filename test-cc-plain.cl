;;; -*- Mode: Common-Lisp; -*-

(defmacro pass? (test value)
  `(format t "~a  ~:[FAIL~;pass~]~%" ',test (equal ,test ,value)))
(pass? (make-new-amp 3)
       '(t he+ pe+ he+ pe+ he+ pe+))
(pass? (contract-hole-amp '(t he+ pe+ he+ pe+))
       '(t hi+ pe+ he+ pe+))
(pass? (contract-particle-amp '(t he+ pi+ he+ pe+))
       '(t he+ pi+ he+ pi+))
(pass? (contract-particle-amp '(t he+ pi+ he+ pi+))
       nil)

(pass? (mapcan #'contract-hole-ampprod '(((t hi+ pe+)) ((t hi+ pe+))))
       nil)
(pass? (contract-hole-ampprod '((t he+ pe+) (t he+ pe+ he+ pe+)))
       '(((t hi+ pe+) (t he+ pe+ he+ pe+)) ((t he+ pe+) (t hi+ pe+ he+ pe+))))
(pass? (contract-hole-ampprod '((t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+)))
       '(((t hi+ pe+ he+ pe+) (t he+ pe+ he+ pe+))))

(pass? (contract-ops-ampprods '(he- pe- he+ pe+) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t he+ pe+ he+ pe+))
         ((t hi+ pe+) (t he+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pi+ he+ pe+))))
(pass? (contract-ops-ampprods '(he- he-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pe+ hi+ pe+))))

(pass? (contract-ops-ampprods '(he-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pe+) (t he+ pe+ he+ pe+)) ((t he+ pe+) (t hi+ pe+ he+ pe+))))
(pass? (contract-ops-ampprods '(he-) '(((t hi+ pe+) (t he+ pe+ he+ pe+))
                                      ((t he+ pe+) (t hi+ pe+ he+ pe+))))
       '(((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pe+ hi+ pe+))))
(pass? (contract-ops-ampprods '(pe-) '(((t hi+ pe+) (t he+ pe+ he+ pe+))
                                      ((t he+ pe+) (t hi+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t he+ pe+ he+ pe+))
         ((t hi+ pe+) (t he+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pi+ he+ pe+))))
       
(pass? (id-amp '(t hi+ he+ pi+ pe-)) 1437)
(pass? (id-amp '(t he+ pe+)) 55)
(pass? (sort-ampprod '((t he+ pe+) (t hi+ pe+)))
       '((t hi+ pe+) (t he+ pe+)))

(pass? (contract-ops-ampprods '(he- pe- he- he+) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pe+))
         ((t hi+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pe+))))
(pass? (contract-ops-ampprods-uniq '(he- pe- he- he+) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pe+))))
(pass? (contract-ops-ampprods '(he- pe- he- pe-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pi+ he+ pe+)) ((t hi+ pi+) (t hi+ pi+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pi+)) ((t hi+ pi+) (t hi+ pi+ he+ pe+))
         ((t hi+ pi+) (t hi+ pi+ he+ pe+)) ((t hi+ pe+) (t hi+ pi+ he+ pi+))
         ((t he+ pi+) (t hi+ pi+ hi+ pe+)) ((t he+ pi+) (t hi+ pi+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pi+))))
(pass? (contract-ops-ampprods-uniq '(he- pe- he- pe-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pi+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pi+))
         ((t he+ pi+) (t hi+ pi+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pi+))))
(pass? (contract-ops-ampprods '(he- pe- he- pe-) '(((t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+ hi+ pi+) (t he+ pe+ he+ pe+))
         ((t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((t hi+ pe+ hi+ pe+) (t he+ pi+ he+ pi+))
         ((t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pi+ he+ pe+) (t hi+ pi+ he+ pe+))))

(pass? (connected-amp? '(t hi+ pi+ he+ pe+)) t)
(pass? (connected-amp? '(t hi+ pe+ he+ pe+)) t)
(pass? (connected-amp? '(t he+ pe+ he+ pe+)) nil)
(pass? (contract-h2e-ampprod '(h he- pe- he- pe-) '((t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+)))
       '(((h he- pe- he- pe-) (t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((h he- pe- he- pe-) (t hi+ pe+ hi+ pe+) (t he+ pi+ he+ pi+))
         ((h he- pe- he- pe-) (t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+))
         ((h he- pe- he- pe-) (t hi+ pi+ he+ pe+) (t hi+ pi+ he+ pe+))))

(pass? (gen-amps-list '(1))
       '(((t he+ pe+))
         ((t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+))))
(pass? (gen-amps-list '(1 2))
       '(((t he+ pe+))
         ((t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+ he+ pe+))))

(pass? (count-tot-lines (lambda (x) (eql x 'hi+))
                        '((t hi+ he+) (t hi+ he+ he+ pe+)))
       2)
(pass? (count-tot-lines (lambda (x) (or (eql x 'he+) (eql x 'pe+)))
                        '((t hi+ he+) (t hi+ he+ he+ pe+)))
       4)
(pass? (count-hole-lines '((h he- pe- he- pe-) (t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+)))
       6)
(pass? (label-amp-contract-hole 'x '(t hi+ pe+ he+ pe+))
        '(t x pe+ he+ pe+)))
(pass? (label-amp-contract-particle 'x '(t he+ pi+ he+ pi+))
       '(t he+ x he+ pi+))
(pass? (label-contract-pair #'label-amp-contract-hole 'x
                        '((h hi- he+) (t hi+ pe+) (t he+ pi+) (t he+ pi+)))
       '((h x he+) (t x pe+) (t he+ pi+) (t he+ pi+)))

(pass? (label-lines '((h hi- pi- hi- he+) (t hi+ pe+) (t hi+ pe+) (t he+ pi+) (t he+ pe+)))
       '((h 1 2 3 4) (t 1 5) (t 3 6) (t 7 2) (t 8 9)))

;(pass? (mapcan (lambda (ampprod)    
;                 (contract-h2e-ampprod '(h (- -) (- -)) ampprod))
;               (gen-amps-list '(1)))
;       '(((h (- -) (- -)) (t (k) (k)) (t (k) (k)))
;         ((h (- -) (- -)) (t (k) (k)) (t (k) (+)) (t (+) (k)))
;         ((h (- -) (- -)) (t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k)))))
;(gen-amp-diagrams '(1))

;(pass? (gen-h2e-diagrams '(1))
;       '(((t (k) (+))) ((t (+) (k))) ((t (k) (k))) ((t (k) (k)) (t (k) (+)))
;         ((t (k) (k)) (t (+) (k))) ((t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (k) (+))) ((t (+) (k)) (t (+) (k)))
;         ((t (k) (k)) (t (k) (k))) ((t (k) (+)) (t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (+) (k)) (t (+) (k))) ((t (k) (k)) (t (k) (+)) (t (+) (k)))
;         ((t (k) (+)) (t (k) (+)) (t (+) (k)) (t (+) (k)))))
;(gen-h2e-diagrams '(1 2))
