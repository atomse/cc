;;; -*- Mode: Common-Lisp; -*-

(defmacro pass? (test value)
  `(format t "~a  ~:[FAIL~;pass~]~%" ',test (equal ,test ,value)))
(pass? (make-new-amp 3)
       '(t he+ pe+ he+ pe+ he+ pe+))
(pass? (contract-hole-amp '(t he+ pe+ he+ pe+))
       '(t hi+ pe+ he+ pe+))
(pass? (contract-particle-amp '(t he+ pi+ he+ pe+))
       '(t he+ pi+ he+ pi+))
(pass? (contract-particle-amp '(t he+ pi+ he+ pi+))
       nil)

(pass? (mapcan #'contract-hole-ampprod '(((t hi+ pe+)) ((t hi+ pe+))))
       nil)
(pass? (contract-hole-ampprod '((t he+ pe+) (t he+ pe+ he+ pe+)))
       '(((t hi+ pe+) (t he+ pe+ he+ pe+)) ((t he+ pe+) (t hi+ pe+ he+ pe+))))
(pass? (contract-hole-ampprod '((t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+)))
       '(((t hi+ pe+ he+ pe+) (t he+ pe+ he+ pe+))))

(pass? (contract-ops-ampprods '(he- pe- he+ pe+) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t he+ pe+ he+ pe+))
         ((t hi+ pe+) (t he+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pi+ he+ pe+))))
(pass? (contract-ops-ampprods '(he- he-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pe+ hi+ pe+))))

(pass? (contract-ops-ampprods '(he-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pe+) (t he+ pe+ he+ pe+)) ((t he+ pe+) (t hi+ pe+ he+ pe+))))
(pass? (contract-ops-ampprods '(he-) '(((t hi+ pe+) (t he+ pe+ he+ pe+))
                                      ((t he+ pe+) (t hi+ pe+ he+ pe+))))
       '(((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pe+ hi+ pe+))))
(pass? (contract-ops-ampprods '(pe-) '(((t hi+ pe+) (t he+ pe+ he+ pe+))
                                      ((t he+ pe+) (t hi+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t he+ pe+ he+ pe+))
         ((t hi+ pe+) (t he+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ he+ pe+))
         ((t he+ pe+) (t hi+ pi+ he+ pe+))))
       
(pass? (id-amp '(t hi+ he+ pi+ pe-)) 1437)
(pass? (id-amp '(t he+ pe+)) 55)
(pass? (sort-ampprod '((t he+ pe+) (t hi+ pe+)))
       '((t hi+ pe+) (t he+ pe+)))

(pass? (contract-ops-ampprods '(he- pe- he- he+) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pe+))
         ((t hi+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pe+))))
(pass? (contract-ops-ampprods-uniq '(he- pe- he- he+) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pe+))
         ((t he+ pi+) (t hi+ pe+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pe+))))
(pass? (contract-ops-ampprods '(he- pe- he- pe-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pi+ he+ pe+)) ((t hi+ pi+) (t hi+ pi+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pi+)) ((t hi+ pi+) (t hi+ pi+ he+ pe+))
         ((t hi+ pi+) (t hi+ pi+ he+ pe+)) ((t hi+ pe+) (t hi+ pi+ he+ pi+))
         ((t he+ pi+) (t hi+ pi+ hi+ pe+)) ((t he+ pi+) (t hi+ pi+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pi+))))
(pass? (contract-ops-ampprods-uniq '(he- pe- he- pe-) '(((t he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+) (t hi+ pi+ he+ pe+))
         ((t hi+ pe+) (t hi+ pi+ he+ pi+))
         ((t he+ pi+) (t hi+ pi+ hi+ pe+))
         ((t he+ pe+) (t hi+ pi+ hi+ pi+))))
(pass? (contract-ops-ampprods '(he- pe- he- pe-) '(((t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))))
       '(((t hi+ pi+ hi+ pi+) (t he+ pe+ he+ pe+))
         ((t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((t hi+ pe+ hi+ pe+) (t he+ pi+ he+ pi+))
         ((t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+))
         ((t hi+ pi+ he+ pe+) (t hi+ pi+ he+ pe+))))

(pass? (connected-amp? '(t hi+ pi+ he+ pe+)) t)
(pass? (connected-amp? '(t hi+ pe+ he+ pe+)) t)
(pass? (connected-amp? '(t he+ pe+ he+ pe+)) nil)
(pass? (contract-h2e-ampprod '(h he- pe- he- pe-) '((t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+)))
       '(((h he- pe- he- pe-) (t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((h he- pe- he- pe-) (t hi+ pe+ hi+ pe+) (t he+ pi+ he+ pi+))
         ((h he- pe- he- pe-) (t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+))
         ((h he- pe- he- pe-) (t hi+ pi+ he+ pe+) (t hi+ pi+ he+ pe+))))

(pass? (gen-amps-list '(1))
       '(((t he+ pe+))
         ((t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+))))
(pass? (gen-amps-list '(1 2))
       '(((t he+ pe+))
         ((t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+))
         ((t he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+ he+ pe+) (t he+ pe+ he+ pe+))
         ((t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+ he+ pe+))))

(pass? (count-tot-lines (lambda (x) (eql x 'hi+))
                        '((t hi+ he+) (t hi+ he+ he+ pe+)))
       2)
(pass? (count-tot-lines (lambda (x) (or (eql x 'he+) (eql x 'pe+)))
                        '((t hi+ he+) (t hi+ he+ he+ pe+)))
       4)
(pass? (count-hole-lines '((h he- pe- he- pe-) (t he+ pe+) (t he+ pe+) (t he+ pe+) (t he+ pe+)))
       6)

(pass? (gen-diagrams-w/o-index '(1))
       '(((f hi- he+) (t hi+ pe+)) ((f pi- pe+) (t he+ pi+))
         ((h hi- he+ hi- he+) (t hi+ pe+)) ((h pi- pe+ pi- pe+) (t he+ pi+))
         ((h hi- he+ pi- pe+) (t hi+ pi+)) ((f hi- pi-) (t hi+ pe+) (t he+ pi+))
         ((h hi- pi- hi- he+) (t hi+ pi+) (t hi+ pe+))
         ((h hi- pi- pi- pe+) (t hi+ pi+) (t he+ pi+))
         ((h hi- pi- hi- pi-) (t hi+ pi+) (t hi+ pe+) (t he+ pi+))))
(pass? (gen-diagrams-w/o-index '(2))
       '(((f hi- he+) (t hi+ pe+ he+ pe+)) ((f pi- pe+) (t he+ pi+ he+ pe+))
         ((h hi- he+ hi- he+) (t hi+ pe+ hi+ pe+))
         ((h pi- pe+ pi- pe+) (t he+ pi+ he+ pi+))
         ((h hi- he+ pi- pe+) (t hi+ pi+ he+ pe+))
         ((h hi- pi- hi- pi-) (t hi+ pi+ hi+ pe+) (t he+ pi+ he+ pe+))
         ((h hi- pi- hi- pi-) (t hi+ pe+ hi+ pe+) (t he+ pi+ he+ pi+))
         ((h hi- pi- hi- pi-) (t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+))
         ((h hi- pi- hi- pi-) (t hi+ pi+ he+ pe+) (t hi+ pi+ he+ pe+))))
;(gen-diagrams-w/o-index '(1 2))
;;;;;;;;;;;;;;;;;;;

(pass? (label-amp-contract-hole 'x '(t hi+ pe+ he+ pe+))
        '(t (hi+ . x) pe+ he+ pe+)))
(pass? (label-amp-contract-hole 'y '(t (hi+ . x) pe+ hi+ pe+))
        '(t (hi+ . x) pe+ (hi+ . y) pe+)))
(pass? (label-amp-contract-particle 'x '(t he+ pi+ he+ pi+))
       '(t he+ (pi+ . x) he+ pi+))
(pass? (label-contract-pair #'label-amp-contract-hole 'x
                        '((h hi- he+) (t hi+ pe+) (t he+ pi+) (t he+ pi+)))
       '((h (hi- . x) he+) (t (hi+ . x) pe+) (t he+ pi+) (t he+ pi+)))

(pass? (label-lines '((h hi- pi- hi- he+) (t hi+ pe+) (t hi+ pe+) (t he+ pi+) (t he+ pe+)))
       '((h (hi- . 1) (pi- . 2) (hi- . 3) (he+ . 4))
         (t (hi+ . 1) (pe+ . 7)) (t (hi+ . 3) (pe+ . 8))
         (t (he+ . 5) (pi+ . 2)) (t (he+ . 6) (pe+ . 9))))
(pass? (label-lines '((h hi- pi- hi- pi-) (t hi+ pi+ he+ pi+) (t hi+ pe+ he+ pe+)))
       '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
         (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
         (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))

(pass? (factor-in-line-pair (label-lines '((h hi- pi- hi- pi-)
                                           (t hi+ pi+ hi+ pe+)
                                           (t he+ pi+ he+ pe+))))
       .5)
(pass? (factor-in-line-pair (label-lines '((h hi- pi- hi- pi-)
                                           (t hi+ pe+ hi+ pe+)
                                           (t he+ pi+ he+ pi+))))
       .25)
(pass? (factor-in-line-pair (label-lines '((h hi- pi- hi- pi-)
                                           (t hi+ pi+ he+ pi+)
                                           (t hi+ pe+ he+ pe+))))
       .5)
(pass? (factor-in-line-pair (label-lines '((h hi- pi- hi- pi-)
                                           (t hi+ pi+ he+ pe+)
                                           (t hi+ pi+ he+ pe+))))
       1)

(pass? (find-rline-vertex '(pi- . 2)
                          '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
                            (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))))
       '(h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4)))
(pass? (find-rline-vertex '(pi+ . 2)
                          '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
                            (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))))
       (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4)))

(pass? (ex-line-eql? '(pe+ . 7) '(pe+ . 8)
                     '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
                       (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
                       (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
       t)
(pass? (ex-line-eql? '(he+ . 5) '(he+ . 6)
                     '((h (hi- . 1) (pi- . 2) (hi- . 3) (pi- . 4))
                       (t (hi+ . 1) (pi+ . 2) (he+ . 5) (pi+ . 4))
                       (t (hi+ . 3) (pe+ . 7) (he+ . 6) (pe+ . 8))))
       nil)
;(symmetric-ampprod? '((t hi+ pe+) (t hi+ pe+)))
;(symmetric-ampprod? '((t hi+ pe+) (t hi+ pe+)) (t he+ pi+) (t he+ pi+)))
